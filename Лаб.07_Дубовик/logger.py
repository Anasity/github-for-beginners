from loguru import logger

logger.add("loggg.log", format="{time} {level} {message}",level="DEBUG")


# объявление функций
def color(tn):  # функция для обрабоки ошибок ввода координат
    try:
        tn = int(tn)  # преобразование в целое число
        if 1 <= tn <= 8:

            return tn
        else:
            print("Вы ввели число не от 1 до 8")
            logger.error("проверка на число: не пройдена (error)")
            return 'False'
    except:
        print("Вы ввели не число или не целое число")
        logger.error("проверка на число: не пройдена (error)")
        return 'False'


def figure(f):  # функция для обработки ошибок ввода в задаче Б (номера фигур)
    try:
        f = int(f)
        if 1 <= f <= 4:
            return f
        else:
            print("Вы не выбрали номер фигуры")
            logger.error("проверка на число: не пройдена (error)")
            return 'False'
    except:
        print("Вы не выбрали номер фигуры")
        logger.error("проверка на число: не пройдена (error)")
        return 'False'


def hod(s):  # функция для обработки ошибок ввода в задаче В (номера фигур)
    try:
        s = int(s)
        if 1 <= s <= 3:
            return s
        else:
            print("Вы не выбрали номер фигуры")
            logger.error("проверка на число: не пройдена (error)")
            return 'False'
    except:
        print("Вы не выбрали номер фигуры")
        logger.error("проверка на число: не пройдена (error)")
        return 'False'


# ввод координат
print('(k,l) - координаты первого поля, (m,n) - второго. Введите соответствующие координаты (от 1 до 8) ')
logger.info('(k,l) - координаты первого поля, (m,n) - второго. Введите соответствующие координаты (от 1 до 8) ')

k = input('введите k: ')
logger.info("первая координата введена (info)")
while color(k) == 'False':  # обработка ошибок ввода k
    k = input('введите k: ')
    logger.info("первая координата введена (info)")
logger.info("проверка на число:пройдена (info)")
k = color(k)

l = input('введите l: ')
logger.info("вторая координата введена (info)")
while color(l) == 'False':  # обработка ошибок ввода l
    l = input('введите l: ')
    logger.info("вторая координата введена (info)")
logger.info("проверка на число:пройдена (info)")
l = color(l)

m = input('введите m: ')
logger.info("третья координата введена (info)")
while color(m) == 'False':  # обработка ошибок ввода m
    m = input('введите m: ')
    logger.info("третья координата введена (info)")
logger.info("проверка на число:пройдена (info)")
m = color(m)

n = input('введите n: ')
logger.info("четвёртая координата введена (info)")
while color(n) == 'False':  # обработка ошибок ввода n
    n = input('введите n: ')
    logger.info("четвёртая координата введена (info)")
logger.info("проверка на число:пройдена (info)")
n = color(n)

# задача А
if (k + l) % 2 == (m + n) % 2:  # формула для определения соответствия цветов полей
    logger.info('Поля одного цвета (info)')
    print('Поля одного цвета')
else:
    logger.info('Поля не одного цвета (info)')
    print('Поля не одного цвета')

# задача Б, определение угрозы фигуры полю (m, n)
num = input("""Выберите номер фигуры, которая расположена на поле (k, l):
            ферзь - 1
            ладья - 2
            слон - 3
            конь - 4
            """)
logger.info("номер фигуры введён (info)")
while figure(num) == 'False':  # обработка ошибок ввода номера фигуры
    num = input("""Выберите номер фигуры, которая расположена на поле (k, l): 
            ферзь - 1
            ладья - 2
            слон - 3
            конь - 4
            """)
    logger.info("номер фигуры введён (info)")
logger.info("проверка на число:пройдена (info)")
num = figure(num)
if num == 1:  # если фигура - ферзь
    if abs(k - m) == abs(l - n) or k == m or l == n:  # если поля находятся на одной горизонтали, вертикали или диагонали
        logger.info('Ферзь угрожает полю (m, n) (info)')
        print('Ферзь угрожает полю (m, n)')
    else:
        logger.info('Ферзь НЕ угрожает полю (m, n) (info)')
        print('Ферзь НЕ угрожает полю (m, n)')
elif num == 2:  # если фигура - ладья
    if (k == m) or (l == n):  # если поля находятся на одной горизонтали или вертикали
        logger.info('Ладья угрожает полю (m, n) (info)')
        print('Ладья угрожает полю (m, n)')
    else:
        logger.info('Ладья НЕ угрожает полю (m, n) (info)')
        print('Ладья НЕ угрожает полю (m, n)')
elif num == 3:  # если фигура - слон
    if abs(k - m) == abs(l - n):  # если поля находятся на одной диагонали
        logger.info('Слон угрожает полю (m, n) (info)')
        print('Слон угрожает полю (m, n)')
    else:
        logger.info('Слон НЕ угрожает полю (m, n) (info)')
        print('Слон НЕ угрожает полю (m, n)')
elif num == 4:  # если фигура - конь
    if ((abs(abs(k - m) - 2) < 0.5) and (abs(abs(l - n) - 1) < 0.5) or (abs(abs(k - m) - 1) < 0.5) and (
            abs(abs(l - n) - 2.0) < 0.5)):
        # если поля находятся на расстоянии двух клетки по вертикали и одной по горизонтали
        # или на расстоянии двух клеток по горизонтали и одной по вертикали)
        logger.info('Конь угрожает полю (m, n) (info)')
        print('Конь угрожает полю (m, n)')
    else:
        logger.info('Конь НЕ угрожает полю (m, n) (info)')
        print('Конь НЕ угрожает полю (m, n)')

# задача В, ход фигуры
fig = input("""Выберите номер фигуры, которая расположена на поле (k, l): 
            ферзь - 1
            ладья - 2
            слон - 3
            """)
logger.info("номер фигуры введён (info)")
while hod(fig) == 'False':  # обработка ошибки ввода номера фигуры
    fig = input("""Выберите номер фигуры, которая расположена на поле (k, l):
            ферзь - 1
            ладья - 2
            слон - 3
            """)
    logger.info("номер фигуры введён (info)")
logger.info("проверка на число:пройдена (info)")
fig = hod(fig)

if fig == 1:  # если фигура - ферзь
    if (k == m) and (l == n):
        logger.info('Ферзь уже находится на поле (m, n) (info)')
        print('Ферзь уже находится на поле (m, n)')
    elif abs(k - m) == abs(l - n) or k == m or l == n:  # если поля находятся на одной горизонтали, вертикали или диагонали
        logger.info('одним ходом ферзя можно попасть на поле (m, n) (info)')
        print('одним ходом ферзя можно попасть на поле (m, n)')
    else:
        logger.info(f'чтобы попасть на поле ({m},{n}) нужно переместиться на поле ({k};{n}) (info)')
        print(f'чтобы попасть на поле ({m},{n}) нужно переместиться на поле ({k};{n})')

elif fig == 2:  # если фигура - ладья
    if (k == m) and (l == n):
        logger.info('Ладья уже находится на поле (m, n) (info)')
        print('Ладья уже находится на поле (m, n)')
    elif (k == m) or (l == n):  # если поля находятся на одной горизонтали или вертикали
        logger.info('одним ходом ладьи можно попасть на поле (m, n) (info)')
        print('одним ходом ладьи можно попасть на поле (m, n)')
    else:
        logger.info(f'чтобы попасть на поле ({m},{n}) нужно переместиться на поле ({k};{n}) (info)')
        print(f'чтобы попасть на поле ({m},{n}) нужно переместиться на поле ({k};{n})')

elif fig == 3:  # если фигура - слон
    if (k == m) and (l == n):
        logger.info('Слон уже находится на поле (m, n) (info)')
        print('Слон уже находится на поле (m, n)')
    elif abs(k - m) == abs(l - n):  # если поля находятся на одной горизонтали или диагонали
        logger.info('одним ходом слона можно попасть на поле (m, n) (info)')
        print('одним ходом слона можно попасть на поле (m, n)')
    elif ((k + l) % 2) != ((m + n) % 2):  # формула для определения соответствия цветов полей
        logger.info('Слон не может попасть на поле (m, n), так как поля разного цвета (info)')
        print('Слон не может попасть на поле (m, n), так как поля разного цвета')
    else:
        # формулы для определения новых координат
        x = (m + n + k - l) // 2
        y = (m + n - k + l) // 2
        logger.info(f'чтобы попасть на поле ({m},{n}) нужно переместиться на поле ({x};{y}) (info)')
        print(f'чтобы попасть на поле ({m},{n}) нужно переместиться на поле ({x};{y})')
        # вывод координат поля, на которое приводит первый ход
